1720945930
b5debafe45d068f69045cb9dcbe783aa-phpdoc%3A4b618f47d172109626a9971d1556c07f-cdcc1e931d2cda7fb1fd27c7728394ab
s:40032:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:39:" phpDocumentor\Reflection\Php\File name";s:13:"generales.php";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"cdcc1e931d2cda7fb1fd27c7728394ab";s:39:" phpDocumentor\Reflection\Php\File path";s:28:"app/parametros/generales.php";s:41:" phpDocumentor\Reflection\Php\File source";s:27889:"<?php
    /**
     * Este archivo contiene todos los asuntos generales de la empresa como contabilidad y cuentas
     * 
     * @package parametros
    */
    include('../autoload.php');
    session_start();

    // Variables de la pagina
    /**
     * @var string $pg Nombre de la pagina
    */
    $pg = 'Generales';

    // Instancias 
    /**
     * @var Web $web Instancia de la clase Web
     * @var Dropdowns $drp Instancia de la clase Dropdowns
     * @var Plan_Cuentas $ent_pcnt Instancia de la clase Plan_Cuentas
    */
    $web = new Web();
    $drp = new Dropdowns();
    $ent_pcnt = new Plan_Cuentas();

    // Menu y accesos
    /**
     * @var string $url Direccion url de la pagina
     * @var array $mn Arreglo con los datos del menu
     * @var array $get_acc Arreglo con los accesos del usuario
    */
    $url = substr($_SERVER['REQUEST_URI'],  strpos($_SERVER['REQUEST_URI'], "app/"));
    $mn = $web->menuAcceso($url);
    $get_acc = $web->acc($mn['id']);

    // Crud
    /*
     * @var Variables $ent Instancia de la clase Variables
     * @var Puntos_Venta $ent_pvnt Instancia de la clase Puntos_Venta
     * @var cuentas_depreciacion $ent_cdp Instancia de la clase cuentas_depreciacion
     * @var string $grupo Grupo de las variables
     * @var string $tipo_clcuentas Tipo de las cuentas
     * @var string $tipo_pcntdp Tipo de las cuentas de depreciacion
     * @var string $tipo_pcntdpacum Tipo de las cuentas de depreciacion acumulada
     * @var array $clcuentas Arreglo con las cuentas
     * @var array $gr Arreglo con los datos generales
     * @var array $pvnt Arreglo con los puntos de venta
     * @var array $cdp Arreglo con las cuentas de depreciacion
    */
    $ent = new Variables();
    $ent_pvnt = new Puntos_Venta();
    $ent_cdp = new cuentas_depreciacion();
    $grupo = "Generales";
    $tipo_clcuentas = "CLASE";
    $tipo_pcntdp = "pcnt_id";
    $tipo_pcntdpacum = "pcnt_acum";

    $clcuentas = $_POST['clcuentas'];
    $gr = $_POST['generales'];
    $pvnt = $_POST['puntos'];
    $cdp = $_POST['cdp'];

    /*
     * @var string $filename Nombre del archivo
     * @var Archivo $arc Instancia de la clase Archivo
     * @var array $id Arreglo con los id
     * @var boolean $resp Variable para saber si se realizo una accion
     * @var string $accion Accion a realizar
    */
    if ($_POST['enviar']) {
        if (!($_FILES['archivo_p12']['error'] == 4 || ($_FILES['archivo_p12']['size'] == 0 && $_FILES['archivo_p12']['error'] == 0))) {

            $filename = $gr['RUC'] . '_general';
            $arc = new Archivo();
            $gr['ARCHIVO P12'] = $arc->cargaArchivo($filename, $_FILES['archivo_p12'], 'logos', true);
        }
        $id = [];
        $_POST = [];

        foreach ($gr as $key => $item) {
            $ent->borrarVariables(str_replace(["'", '"', '%22'], "",  $key), $grupo);
            $_POST['vrb_grupo'] = $grupo;
            $_POST['vrb_tipo'] = str_replace(["'", '"', '%22'], "",  $key);
            $_POST['vrb_nombre'] = $item;
            $_POST['estado'] = 'activo';
            $id[] = $ent->guardar();
        }
        $ent->borrarVariables($tipo_clcuentas, $grupo);
        foreach ($clcuentas as  $item) {

            $_POST['vrb_grupo'] = $grupo;
            $_POST['vrb_tipo'] = $tipo_clcuentas;
            $_POST['vrb_nombre'] = $item;
            $_POST['estado'] = 'activo';
            $id[] = $ent->guardar();
        }

        $ent_cdp->borrarData();

        for ($i = 0; $i < count($cdp['fk_pcnt_id']); $i++) {
            $_POST['fk_pcnt_id'] = $cdp['fk_pcnt_id'][$i];
            $_POST['fk_pcnt_id_depre'] = $cdp['fk_pcnt_id_depre'][$i];
            $_POST['fk_pcnt_id_acum'] = $cdp['fk_pcnt_id_acum'][$i];
            $id[] = $ent_cdp->guardar();
        }

        //puntos de venta
        $del_detalle = $ent_pvnt->buscar(-1, ['estado="activo"']);
        foreach ($del_detalle as $delete) {
            $_POST = [];
            $_POST['pvnt_id']=$delete['pvnt_id'];
            $ent_pvnt->pasivo();
        }
        for ($i = 0; $i < count($pvnt['pvnt_codigo']); $i++) {
            $_POST = [];
            $_POST['estado'] = 'activo';
            $_POST['pvnt_tipo'] = $pvnt['pvnt_tipo'][$i];
            $_POST['pvnt_codigo'] = $pvnt['pvnt_codigo'][$i];
            $_POST['pvnt_alias'] = $pvnt['pvnt_alias'][$i];

            if ($pvnt['pvnt_id'][$i] > 0) {
                $_POST['pvnt_id'] = $pvnt['pvnt_id'][$i];
                $ent_pvnt->actualizar();
            } else {
                $id[] = $ent_pvnt->guardar();
            }
        }

        $accion = $web->get_accion('editar');
        $resp = (array_search(0, $id) == '') ? true : false;
    }

    // Limpia POST
    $_POST = [];

    /*
     * @var array $lista Arreglo con las variables
     * @var array $columnas Arreglo con las columnas
     * @var array $data Arreglo con los datos
     * @var array $puntos Arreglo con los puntos de venta activos
     */
    $lista = $ent->buscar(-1, ['vrb_grupo="' . $grupo . '"', 'vrb_tipo!="' . $tipo_clcuentas . '"']);
    // print_r($lista);
    $columnas = array_column($lista, 'vrb_tipo');
    foreach ($columnas as $col) {
        $data[$col] = $lista[array_search($col, ($columnas))]['vrb_nombre'];
    }
    $puntos =  $ent_pvnt->buscar(-1, ['estado="activo"']);

?>

<!DOCTYPE html>
<html>

<head>
    <?= $web->head("SAC | " . $pg); ?>
</head>

<body class="hold-transition sidebar-mini">
    <!-- Site wrapper -->
    <div class="wrapper">
        <?= $web->encabezado() . $web->panelIzquierdo($mn['id']); ?>
        <!-- content-wrapper -->
        <div class="content-wrapper" style="height: auto;">
            <?= $web->navegacion($pg, $mn['padre'], $mn['icono'], strtolower(str_replace(' ', '', $pg))); ?>
            <!-- Main content -->
            <section class="content">
                <div class="card">
                    <div class="card-header">
                        <a href="../../recursos/facturacion_electronica/firmador.php?validar=si" class="btn btn-success" style="float: right" target="_blank">Validar Vigencia P12</a>
                    </div>
                    <div class="card-body">
                        <!-- alerts, create btn -->
                        <div class="row">
                            <div class="col-6">
                                <?= $web->html_alerts($resp, $accion); ?>
                            </div>
                        </div>
                        <form role="form" action="" method="post" enctype="multipart/form-data">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Decimales:</label>
                                        <?= $drp->comboParametros('generales["DECIMALES"]', '2,3,4,5,6', $data['DECIMALES']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Decimal -->
                                        <label>Porcentaje IVA:</label>
                                        <input type="text" name="generales['PORCENTAJE IVA']" value="<?= $data['PORCENTAJE IVA'] ?>" class="form-control numeros">
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Ambiente:</label>
                                        <?= $drp->comboParametros('generales["AMBIENTE"]', 'pruebas,produccion', $data['AMBIENTE']) ?>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Obligado a llevar contabilidad:</label>
                                        <?= $drp->comboParametros('generales["OBLIGADO LLEVAR CONTABILIDAD"]', 'si,no', $data['OBLIGADO LLEVAR CONTABILIDAD']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label>Contraseña P12:</label>
                                        <input type="text" name="generales['CONTRASENIA P12']" value="<?= $data['CONTRASENIA P12'] ?>" class="form-control" required>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label>Archivo P12:</label>
                                        <?php if ($data['ARCHIVO P12'] != '') { ?>
                                            <a href="<?= $web->path . 'archivos/' . $data['ARCHIVO P12'] ?>">
                                                <i class="fa fa-file" style="font-size:36px;"></i></a>
                                        <?php } ?>
                                        <input type="file" name="archivo_p12" value="" class="form-control" accept=".p12">

                                        <input type="hidden" name="generales['ARCHIVO P12']" value="<?= $data['ARCHIVO P12'] ?>" class="form-control">

                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- solo 8 digitos numericos -->
                                        <label>Código del SRI( Autorización ):</label> <em class="text-muted text-sm">(Ejem: 00000001) </em>
                                        <input type="text" name="generales['CODIGO SRI']" value="<?= $data['CODIGO SRI'] ?>" class="form-control numeros codigo_sri" placeholder="Ejem: 00000001" required>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Solo numeros enteros -->
                                        <label>Cantidad de Documentos Electrónicos:</label> <em class="text-muted text-sm">(Ejem: 20) </em>
                                        <input type="text" name="generales['CANT DOCUMENTOS ELECTRONICOS']" value="<?= $data['CANT DOCUMENTOS ELECTRONICOS'] ?>" class="form-control numeros" placeholder="Ejem: 20">
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- unico por el momento -->
                                        <label>Emisión:</label>
                                        <input type="text" name="generales['EMISION']" value="<?= isset($data['EMISION']) ? $data['EMISION'] : 1 ?>" class="form-control" readonly="">
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Régimen:</label>
                                        <input type="text" name="generales['REGIMEN']" value="<?= isset($data['REGIMEN']) ? $data['REGIMEN'] : 1 ?>" class="form-control">
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Versión de Factura Electrónica:</label>
                                        <?= $data['VR FACTURA ELECTRONICA'] ?>
                                        <?= $drp->comboParametros('generales["VR FACTURA ELECTRONICA"]', ',1.0.0,1.1.0',  $data['VR FACTURA ELECTRONICA']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Versión de Retención Electrónica:</label>
                                        <?= $drp->comboParametros('generales["VR RETENCION ELECTRONICA"]', ',1.0.0',  $data['VR RETENCION ELECTRONICA']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Versión Liquidación de Compras Electrónica:</label>
                                        <?= $drp->comboParametros('generales["VR LIQUIDACION COMPRAS ELECTRONICA"]', ',1.1.0',  $data['VR LIQUIDACION COMPRAS ELECTRONICA']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Versión Guía de Remisión Electrónica:</label>
                                        <?= $drp->comboParametros('generales["VR GUIA REMISION ELECTRONICA"]', ',1.0.0', $data['VR GUIA REMISION ELECTRONICA']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Versión de Nota de Crédito Electrónica:</label>
                                        <?= $drp->comboParametros('generales["VR NOTA DE CREDITO ELECTRONICA"]', ',1.0.0', $data['VR NOTA DE CREDITO ELECTRONICA']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Quemado -->
                                        <label>Versión de Nota de Débito Electrónica:</label>
                                        <?= $drp->comboParametros('generales["VR NOTA DE DEBITO ELECTRONICA"]', ',1.0.0', $data['VR NOTA DE DEBITO ELECTRONICA']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Clase Inventarios -->
                                        <label>Cuenta para Iva Compras:</label>
                                        <?= $ent_pcnt->comboBoxPC("generales['IVA COMPRAS']", ['pcnt_codigo', 'pcnt_nombre'], 'pcnt_id', 'ACTIVO', 'IM', $data['IVA COMPRAS']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Clase Inventarios -->
                                        <label>Cuenta para Iva Ventas:</label>
                                        <?= $ent_pcnt->comboBoxPC("generales['IVA VENTAS']", ['pcnt_codigo', 'pcnt_nombre'], 'pcnt_id', 'PASIVO', 'IM', $data['IVA VENTAS']) ?>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Clase Inventarios -->
                                        <label>Bodega Compras:</label>
                                        <?= $drp->comboBoxTabla("bodegas", "generales['BODEGA COMPRAS']", ['bdg_nombre'], 'bdg_id', $data['BODEGA COMPRAS']) ?>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <!-- Clase Inventarios -->
                                        <label>Bodega Ventas:</label>
                                        <?= $drp->comboBoxTabla("bodegas", "generales['BODEGA VENTAS']", ['bdg_nombre'], 'bdg_id', $data['BODEGA VENTAS']) ?>
                                    </div>
                                </div>


                                <div class="col-sm-6">
                                    <div class="form-group border p-2">
                                        <div class="row">
                                            <div class="col-sm-10"> <label>Clases de Cuentas:</label> <em class="text-muted text-sm">(Ejem: CH,CXC,CXP) </em>
                                            </div>
                                            <div class="col-sm-2">
                                                <a class="btn btn-success" onclick="add('clcuentas')"><i class="fas fa-plus"></i></a>
                                            </div>
                                        </div>


                                        <div id="clcuentas">
                                            <?php
                                            $listado = $ent->buscar(-1, ['vrb_tipo="' . $tipo_clcuentas . '"', 'vrb_grupo="' . $grupo . '"']);

                                            foreach ($listado as $item) {
                                            ?>
                                                <div class="row">
                                                    <div class="col-sm-10"> <input type="text" name="clcuentas[]" class="form-control" value="<?= $item['vrb_nombre'] ?>">
                                                    </div>
                                                    <div class="col-sm-2">
                                                        <a class="btn btn-danger" onclick="remove($(this))"><i class="fas fa-times"></i></a>
                                                    </div>
                                                </div>

                                            <?php } ?>

                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6"></div>
                                <div class="col-sm-12">
                                    <div class="form-group border p-2">
                                        <div align="center"><b>Configuracion Para Activos Fijos</b></div>
                                        <div class="row">
                                            <div class="col-sm-3"> <label>Cuentas Bienes:</label> </div>
                                            <div class="col-sm-4"> <label>Cuentas Depreciación:</label> </div>
                                            <div class="col-sm-4"> <label>Cuentas Depreciación Acumulada:</label> </div>
                                            <div class="col-sm-1">
                                                <a class="btn btn-success row_clone_pcnt_add"><i class="fas fa-plus"></i></a>
                                            </div>
                                        </div>
                                        <div id="pcntdp">
                                            <?php
                                            $listado = $ent_cdp->buscar(-1, ['1']);


                                            (count($listado) == 0) ? $listado = [[]] : '';
                                            foreach ($listado as $item) {

                                            ?>
                                                <div class="row row_clone_pcnt">
                                                    <div class="col-sm-3">
                                                        <?= $ent_pcnt->comboBoxPC("cdp[fk_pcnt_id][]", ['pcnt_nombre'], 'pcnt_id', 'ACTIVO', 'PPE', $item['fk_pcnt_id']) ?>
                                                    </div>
                                                    <div class="col-sm-4">
                                                        <?= $ent_pcnt->comboBoxPC("cdp[fk_pcnt_id_depre][]", ['pcnt_nombre'], 'pcnt_id', 'GASTOS', 'DP', $item['fk_pcnt_id_depre']) ?>
                                                    </div>
                                                    <div class="col-sm-4">
                                                        <?= $ent_pcnt->comboBoxPC("cdp[fk_pcnt_id_acum][]", ['pcnt_nombre'], 'pcnt_id', 'ACTIVO', 'DP', $item['fk_pcnt_id_acum']) ?>
                                                    </div>
                                                    <div class="col-sm-1">
                                                        <a class="btn btn-danger" onclick="remove($(this))"><i class="fas fa-times"></i></a>
                                                    </div>
                                                </div>

                                            <?php } ?>

                                        </div>
                                    </div>
                                </div>



                                <div class="col-sm-12">
                                    <div class="form-group border p-2">

                                        <div class="row">
                                            <div class="col-sm-10"> <label>Puntos de venta: (Establecimientos)</label>
                                            </div>
                                            <div class="col-sm-2">

                                            </div>
                                        </div>
                                        <div id="pvnt" class="table-responsive">

                                            <table class="table table-bordered table-hover" width="100%">
                                                <thead>
                                                    <tr>

                                                        <th width="20%">Tipo</th>
                                                        <th width="45%">Código <em class="text-muted text-sm">(Ejem: 001002,001002) </em></th>
                                                        <th width="30%">Alias <em class="text-muted text-sm">(Ejem: Quito,Guayaquil) </em></th>
                                                        <th width="5%"> <a class="btn btn-success tr_clone_add"><i class="fas fa-plus"></i></a></th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <?php foreach ($puntos as $item) { ?>
                                                        <tr class="tr_clone">

                                                            <td> <?= $drp->comboParametros('puntos[pvnt_tipo][]', 'FÍSICO,ELECTRÓNICO',  $item['pvnt_tipo']) ?>
                                                                <div style="display: none;">
                                                                    <input type="text" name='puntos[pvnt_id][]' value="<?= $item['pvnt_id'] ?>">
                                                                </div>
                                                            </td>
                                                            <td> <input type="text" name='puntos[pvnt_codigo][]' class="form-control numeros" value="<?= $item['pvnt_codigo'] ?>"></td>
                                                            <td> <input type="text" name='puntos[pvnt_alias][]' class="form-control" value="<?= $item['pvnt_alias'] ?>"></td>
                                                            <td> <a class="btn btn-danger" onclick="remove($(this))"><i class="fas fa-times"></i></a>
                                                            </td>
                                                        </tr>
                                                    <?php } ?>

                                                </tbody>
                                            </table>






                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-success" name="enviar" value="enviar">Guardar</button>
                        </form>

                    </div>
            </section>
        </div>
        <!-- content-wrapper -->

        <!-- PANEL DERECHO -->
        <aside class="control-sidebar control-sidebar-dark">
        </aside>


        <?= $web->footer() ?>
        <?= $web->html_select2(); ?>
    </div>
    <!-- ./wrapper -->
    <?php
    $array_find = $ent->buscar(-1, ['1']);
    $encode = json_encode($array_find);
    echo $web->validaDatos($encode) ?>
    <?= $web->modal_crud('ventas_modal', 'modal-lg') ?>
</body>
<?= $web->add_remove_configuracion() ?>
<script type="text/javascript">
    $("a.tr_clone_add").click(function() {
        var $tr = $('.tr_clone:last');
        var $clone = $tr.clone();
        $clone.find(':text').val('');
        $clone.find(':text').removeAttr('readonly');
        $clone.find('select').val('');

        $tr.after($clone);

    });

    $("a.row_clone_pcnt_add").click(function() {
        var $tr = $('.row_clone_pcnt:last');
        var $clone = $tr.clone();
        $clone.find(':text').val('');
        $clone.find('select[name="cdp[fk_pcnt_id][]"]').val('');
        $clone.find('select[name="cdp[fk_pcnt_id_depre][]"]').val('');
        $clone.find('select[name="cdp[fk_pcnt_id_acum][]"]').val('');
        $tr.after($clone);

        $('select[name="cdp[fk_pcnt_id][]"]').select2({
            placeholder: ''
        });
        $('select[name="cdp[fk_pcnt_id][]"]').last().next().next().remove();


        $('select[name="cdp[fk_pcnt_id_depre][]"]').select2({
            placeholder: ''
        });
        $('select[name="cdp[fk_pcnt_id_depre][]"]').last().next().next().remove();



        $('select[name="cdp[fk_pcnt_id_acum][]"]').select2({
            placeholder: ''
        });
        $('select[name="cdp[fk_pcnt_id_acum][]"]').last().next().next().remove();






    });


    function remove(element) {
        element.parent().parent().remove();
    }
</script>

</html>";s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:91:"Este archivo contiene todos los asuntos generales de la empresa como contabilidad y cuentas";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:1:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"package";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:10:"parametros";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";